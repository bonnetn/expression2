@name MMaze
@inputs Fu
@outputs Phase
@persist Phase [Cells CellGroup]:array Groups:table SizeX SizeY HoloIndex PlateLength
@persist P0_X P0_Y P01_StartTime P01_Ticks
@persist P1_WallsBroken
@persist [P2_BuildX P3_BuildX]:table P2_X P2_Y P2_Count P2_Type
@persist P4_X P4_Y P4_Offset
@trigger 

if(first())
{
    
    PlateLength = 380.099976/8
    function generateMaze(X, Y)
    {
        Phase = 0  
        Cells = array()  
        CellGroup = array()
        Groups = table()
        SizeX = X
        SizeY = Y
        runOnTick(1)
        P0_X = 0
        P0_Y = 0
        
        P01_StartTime = systime()
        P01_Ticks = 0
        
    }
    
    function number getCell( X, Y )
    {
        if(X >= SizeX | Y >= SizeY | Y < 0 | X < 0) {
            return -1
        }
        return X + Y * SizeX + 1
    }
    
    function string getModel( V ) 
    {
        if(V == 1) {
            return "models/hunter/plates/plate1x2.mdl"
        }
        return "models/hunter/plates/plate2x" + V + ".mdl"   
    }
    
    function angle getModelAngleNS( V )
    {
        if(V == 1) {
            return ang(0,0,90)
        }
        else {
            return ang(90,90,0)
        }
    }
    function angle getModelAngleEW( V )
    {
        if(V == 1) {
            return ang(0,90,90)
        }
        else {
            return ang(90,0,0)
        }
    }
    
    
    function number getCellInDir( X, Y, Dir )
    {

        if(Dir == 0) {
            return getCell(X,Y-1)
        } elseif(Dir == 1) {
            return getCell(X-1,Y)
        } elseif(Dir == 2) {
            return getCell(X,Y+1)
        } elseif(Dir == 3) {
            return getCell(X+1,Y)
        } else {
            return -1
        }
    }
    
    
    function number breakWall( X, Y, Dir )
    {
        if( X < SizeX & Y < SizeY ) {
                
            if(Dir == 0) {
                local ID = getCell(X,Y)
                Cells[ ID, number ] = bAnd( Cells[ ID, number ], 2 )
            }
            elseif(Dir == 1) {
                local ID = getCell(X,Y)
                Cells[ ID, number ] = bAnd( Cells[ ID, number ], 1 )
            }
            elseif(Dir == 2) {
                breakWall(X, Y+1, 0)
            }
            elseif(Dir == 3) {
                breakWall(X+1, Y, 1)
            }
        }
        
    }
    
    
    
    generateMaze(20,200)
    
}
elseif(Fu & ~Fu)
{
    
}
elseif(tickClk())
{
    
    if(Phase == 0 | Phase == 1) {
        P01_Ticks++
    }
    
    if(Phase == 0) {
        
        while(perf() & !(P0_X == 0 & P0_Y == SizeY) ) {
            
            local ID = getCell(P0_X, P0_Y)
            Cells[ID,number] = 3
            CellGroup[ID,number] = ID
            Groups[ID, array] = array(ID)
            
            P0_X++
            if(P0_X >= SizeX) {
                P0_X = 0
                P0_Y++
            }
        }
        if( P0_X == 0 & P0_Y == SizeY ) {
            Phase = 1
            P1_WallsBroken = 0
        }
    }
    if(Phase == 1) {
        
        while(perf(50) & Phase == 1) {
            
            local X = randint(0, SizeX-1)
            local Y = randint(0, SizeY-1)
            local Dir = randint(0,3)
            
            local A = getCellInDir( X, Y, Dir)
            local B = getCell(X,Y)
            
            if(A != -1)
            {
                local GroupIDA = CellGroup[A,number]
                local GroupIDB = CellGroup[B,number]
                
                if(GroupIDA != GroupIDB)
                {
                    
                    if( Groups[GroupIDA, array]:count() < Groups[GroupIDB, array]:count() )
                    {
                        local Temp = B
                        B = A
                        A = Temp
            
                        Temp = GroupIDB
                        GroupIDB = GroupIDA
                        GroupIDA = Temp
                    }
                    
                    local GroupA = Groups[GroupIDA, array]
                    local GroupB = Groups[GroupIDB, array]
                    
                    
                    for(I=1, GroupB:count()) {
                        local Cell = GroupB[I,number]
                        CellGroup[Cell, number] = GroupIDA
                        GroupA:pushNumber(Cell)
                    }
                    
                    Groups[GroupIDB, array] = array()
                    
                    breakWall(X,Y,Dir)
                    
                    P1_WallsBroken++
                    
                    if(P1_WallsBroken == SizeX * SizeY - 1)
                    {
                        print("Generated the maze in " + round((systime()-P01_StartTime)*1000) + "ms (" + P01_Ticks + " ticks)")
                        Phase = 2
                        P2_X = 0
                        P2_Y = 0
                        P2_BuildX = table(array())
                        P2_Count = 0
                        P2_Type = 0
                    }
                }
            }
        }    
    }
    
    if(Phase == 42 & holoCanCreate()) {

        local EPos = entity():pos()
        
                
        if(P2_Y < SizeY & P2_X < SizeX )
        {
            HoloIndex++
            local I = HoloIndex
            local C = getCell(P2_X,P2_Y)
            if(bAnd(Cells[C, number], 2)) {
                holoCreate(I*2, EPos + vec(P2_X,P2_Y,0)*50 - vec(1,0,0)*25)
                holoScaleUnits(I*2, vec(1,50,1))
                holoColor(I*2,vec((C==1)*255))
            }
            if(bAnd(Cells[C, number], 1)) {
                holoCreate(I*2+1, EPos + vec(P2_X,P2_Y,0)*50 - vec(0,1,0)*25)
                holoScaleUnits(I*2+1, vec(50,1,1))
                holoColor(I*2+1,vec((C==1)*255))
            }
        }
        elseif( P2_X != SizeX | P2_Y != SizeY)
        {
            HoloIndex++
            local I = HoloIndex
            local C = getCell(P2_X,P2_Y)
            if(P2_X == SizeX) {
                holoCreate(I*2, EPos + vec(P2_X,P2_Y,0)*50 - vec(1,0,0)*25)
                holoScaleUnits(I*2, vec(1,50,1))
                holoColor(I*2,vec((C==1)*255))
            }
            if(P2_Y == SizeY) {
                holoCreate(I*2+1, EPos + vec(P2_X,P2_Y,0)*50 - vec(0,1,0)*25)
                holoScaleUnits(I*2+1, vec(50,1,1))
                holoColor(I*2+1,vec((C==1)*255))
            }
        }
        
        P2_X++
        if(P2_X > SizeX)
        {
            P2_X = 0
            P2_Y++
            if(P2_Y == SizeY+1 & P2_X == 0)
            {
                Phase = 43
                P2_X = 0
                P2_Y = 0
                P2_BuildX = table(array())
                P2_Count = 0
                P2_Type = 0
              
            }
        }
    }
    
    if(Phase == 2)
    {
        while(perf() & Phase == 2) {
            local C = getCell(P2_X, P2_Y)
            if(P2_Type != bAnd(Cells[C, number], 1))
            {
                if(P2_Count) {
                    P2_BuildX[P2_BuildX:count(), array]:pushNumber((P2_Type ? 1 : -1) * P2_Count)
                }
                P2_Count = 1
                P2_Type = !P2_Type    
            }
            
            else
            {
                P2_Count++
                if(P2_Count == 8)
                {
                    P2_BuildX[P2_BuildX:count(), array]:pushNumber((P2_Type ? 1 : -1) * P2_Count)
                    P2_Count = 0
                }
            }
            
            P2_X++
            if(P2_X >= SizeX) {
                
                P2_X = 0
                P2_Y++
                P2_BuildX[P2_BuildX:count(), array]:pushNumber((P2_Type ? 1 : -1) * P2_Count)
                P2_Count = 0
                
                
                if(P2_Y == SizeY) {
                    Phase = 3
                    P2_X = 0
                    P2_Y = 0
                    P3_BuildX = table(array())
                    P2_Count = 0
                    P2_Type = 0
                    
                    local R = array()
                    local SizeTemp = SizeX
                    while(SizeTemp) {
                        local N = max(SizeTemp-8,0)
                        R:pushNumber( SizeTemp-N )
                        SizeTemp = N
                    }
                    P2_BuildX:pushArray(R)
                } else {
                    P2_BuildX:pushArray(array())
                }
            }
        }
    }
    if(Phase == 3)
    {
        while(perf() & Phase == 3) {
            local C = getCell(P2_Y, P2_X)
            if(P2_Type != (bAnd(Cells[C, number], 2) ? 1 : 0))
            {
                if(P2_Count) {
                    P3_BuildX[P3_BuildX:count(), array]:pushNumber((P2_Type ? 1 : -1) * P2_Count)
                }
                P2_Count = 1
                P2_Type = !P2_Type    
            }
            
            else
            {
                P2_Count++
                if(P2_Count == 8)
                {
                    P3_BuildX[P3_BuildX:count(), array]:pushNumber((P2_Type ? 1 : -1) * P2_Count)
                    P2_Count = 0
                }
            }
            
            P2_X++
            if(P2_X >= SizeY) {
                
                P2_X = 0
                P2_Y++
                P3_BuildX[P3_BuildX:count(), array]:pushNumber((P2_Type ? 1 : -1) * P2_Count)
                P2_Count = 0
                
                
                if(P2_Y == SizeX) {
                    Phase = 4
                    P4_X = 1
                    P4_Y = 1
                    P4_Offset = 0
                    local R = array()
                    local SizeTemp = SizeY
                    while(SizeTemp) {
                        local N = max(SizeTemp-8,0)
                        R:pushNumber( SizeTemp-N )
                        SizeTemp = N
                    }
                    P3_BuildX:pushArray(R)
                    print("Found what prop to use.")
                } else {
                    P3_BuildX:pushArray(array())
                }
            }
        }
    }
    if(Phase == 4)
    {
        propSpawnEffect(0)
        local E = entity()
        while(perf() & Phase == 4 & propCanCreate())
        {
            local Value = P2_BuildX[P4_Y,array][P4_X,number]
            if(Value > 0) {
                HoloIndex++
                local Pos = E:toWorld( vec(P4_Offset + Value/2,P4_Y-1,0)*PlateLength - vec(1,1,-2)*PlateLength/2)
                local Ang = E:toWorld(getModelAngleNS(Value))
                local Mdl = getModel(Value)
                local Ent = propSpawn(Mdl, Pos, Ang, 1)
                Ent:propShadow(0)
            }
            P4_Offset += abs(Value)
            
            P4_X++
            if(P4_X > P2_BuildX[P4_Y,array]:count()) {
                                
                P4_X = 1
                P4_Y++     
                P4_Offset = 0   
                
                if(P4_Y > P2_BuildX:count()) {
                    Phase = 5
                    P4_X = 1
                    P4_Y = 1
                    P4_Offset = 0
                }
            }
        }
    }

    if(Phase == 5)
    {
        propSpawnEffect(0)
        local E = entity()
        while(perf() & Phase == 5 & propCanCreate())
        {
            local Value = P3_BuildX[P4_Y,array][P4_X,number]
            if(Value > 0) {
                HoloIndex++
                local Pos = E:toWorld(vec(P4_Y-1,P4_Offset + Value/2,0)*PlateLength - vec(1,1,-2)*PlateLength/2) 
                local Ang = E:toWorld(getModelAngleEW(Value))
                local Mdl = getModel(Value)
                local Ent = propSpawn(Mdl, Pos, Ang, 1)
                Ent:propShadow(0)
            }
            P4_Offset += abs(Value)
            
            P4_X++
            if(P4_X > P3_BuildX[P4_Y,array]:count()) {
                                
                P4_X = 1
                P4_Y++     
                P4_Offset = 0   
                
                if(P4_Y > P3_BuildX:count()) {
                    Phase = 42
                    P2_X = 0
                    P2_Y = 0
                    runOnTick(0)
                    print("Maze spawned with " + HoloIndex + " props")
                    print("Total time: " + round((systime()-P01_StartTime)*1000) + "ms")
                    
                }
            }
        }
    }
    
}
